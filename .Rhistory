rm(list = ls(all = TRUE))
z <- c("hey","yo")     # character
z
## ------------------------------------------------------------------------
rm(list = ls(all = TRUE))
x <- c(1,2,3,4)
y <- c(TRUE, FALSE)
z <- c(4,3,2,1)
## ---- results="hide"-----------------------------------------------------
class(x)
is.vector(x)
names(x) <- c("one", "two", "three", "four")
x
## ---- results="hide"-----------------------------------------------------
x[1]
x["one"]
x[-c(2:4)]
x[x == 1]
## ---- results="hide"-----------------------------------------------------
mean(x)
sum(x)
length(x)
prod(x)
var(x)
sd(x)
min(x); max(x) #you can use a semi colon to have multiple commands on the same line.
data(coronary)
data(coronary)
iris
install.packages("bnlearn")
library(bnlearn)
data(coronary)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
plot(res)
res
View(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")),]
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
fittedbn
print(fittedbn$Proteins)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no" & Pressure==">140" ) )
cpquery(fittedbn, event = (Pressure==">140"), evidence = ( Proteins=="<3" ) )
View(bn_df)
View(coronary)
View(bn_df)
install.packages('alr4')
snake
library(ggplot2)
library(dplyr)
library(alr4)
data(snake)
df.data2 <- data(snake)
df.data2
snake
df.data2 <- snake
test <- lm(snake$Y~snake$X)
tes
test
summary(test)
SYY <- sum((snake$Y - mean(snake$Y))^2)
SXY <- sum((snake$X - mean(snake$X))*(snake$Y - mean(snake$Y)))
SXX <- sum((snake$X - mean(snake$X))^2)
RSS <- SYY - (SXY^2)/SXX
length(snake)-2
nrow(snake)-2
sigma2 <- RSS/(nrow(snake)-2)
x.bar <- mean(snake$X)
SYY <- sum((snake$Y - mean(snake$Y))^2)
SXY <- sum((snake$X - mean(snake$X))*(snake$Y - mean(snake$Y)))
SXX <- sum((snake$X - mean(snake$X))^2)
RSS <- SYY - (SXY^2)/SXX
sigma2 <- RSS/(nrow(snake)-2)
SEB1 <- sigma2/(SXX^(1/2))
SEB0 <- sigma2*((1/nrow(snake)+(x.bar^2)/SXX)^(1/2))
r2 <- (SXY^2)/(SXX*SYY)
x.bar <- mean(snake$X)
y.bar <- mean(snake$Y)
SYY <- sum((snake$Y - mean(snake$Y))^2)
SXY <- sum((snake$X - mean(snake$X))*(snake$Y - mean(snake$Y)))
SXX <- sum((snake$X - mean(snake$X))^2)
RSS <- SYY - (SXY^2)/SXX
B1 <- SXY/SXX
B0 <- y.bar - B1*x.bar
SEB1 <- sigma2/(SXX^(1/2))
SEB0 <- sigma2*((1/nrow(snake)+(x.bar^2)/SXX)^(1/2))
r2 <- (SXY^2)/(SXX*SYY)
t1.2 <- (B0 - 0)/SEB0
p1.2 <- 2*pt(-abs(t.12), df=nrow(snake)-2)
p1.2 <- 2*pt(-abs(t1.2), df=nrow(snake)-2)
t1.3 <- (B1-0)/SEB1
p1.3 <- 2*pt(-abs(t1.3), df=nrow(snake)-2)
((SXY^2)/SXX)/sigma2
B1/SEB1
(B1/SEB1)^2
(SXY^2)/SXX
RSS <- SYY - (SXY^2)/SXX
RSS
1.553^2
SXX^(1/2)
sqrt(SXX)
x.bar <- mean(snake$X)
y.bar <- mean(snake$Y)
SYY <- sum((snake$Y - mean(snake$Y))^2)
SXX <- sum((snake$X - mean(snake$X))^2)
RSS <- SYY - (SXY^2)/SXX
B1 <- SXY/SXX
B0 <- y.bar - B1*x.bar
sigma2 <- RSS/(nrow(snake)-2)
SEB0 <- sqrt(sigma2)*sqrt(1/nrow(snake)+(x.bar^2)/SXX)
covB1B0 <- -sigma2*(x.bar/SXX)
t1.2 <- (B0 - 0)/SEB0
p1.2 <- 2*pt(-abs(t1.2), df=nrow(snake)-2)
t1.3 <- (B1-0)/SEB1
p1.3 <- 2*pt(-abs(t1.3), df=nrow(snake)-2)
((SXY^2)/SXX)/sigma2
SYY - (SXY^2)/SXX
(SXY^2)/SXX
((SXY^2)/SXX)/sigma
((SXY^2)/SXX)/sigma2
summary(test)
resid(test)
sqrt(SXX)
sqrt(sigma2)
B1/SEB1
RSS/15
t1.3^2
sqrt(101.2)
snake$X - x.bar
(snake$X - x.bar)*(snake$Y - y.bar)
test
test$residuals
test$df.residual
SYY <- sum((snake$Y - y.bar)*(snake$Y - y.bar))
SXY <- sum((snake$X - x.bar)*(snake$Y - y.bar))
SXX <- sum((snake$X - x.bar)*(snake$X - x.bar))
B1 <- SXY/SXX
B0 <- y.bar - B1*x.bar
t1.2 <- (B0)/SEB0
SEB1 <- sigma2/(sqrt(SXX))
SEB1 <- sigma2/(sqrt(SXX))
SEB1 <- sqrt(sigma2)/(sqrt(SXX))
SEB0 <- sqrt(sigma2)*sqrt(1/nrow(snake)+(x.bar^2)/SXX)
x.bar <- mean(snake$X)
y.bar <- mean(snake$Y)
SXY <- sum((snake$X - x.bar)*(snake$Y - y.bar))
SXX <- sum((snake$X - x.bar)*(snake$X - x.bar))
B1 <- SXY/SXX
B0 <- y.bar - B1*x.bar
sigma2 <- RSS/(15)
SEB1 <- sqrt(sigma2)/(sqrt(SXX))
SEB0 <- sqrt(sigma2)*sqrt(1/nrow(snake)+(x.bar^2)/SXX)
covB1B0 <- -sigma2*(x.bar/SXX)
t1.2 <- (B0)/SEB0
p1.2 <- 2*pt(-abs(t1.2), df=15)
t1.3 <- (B1)/SEB1
p1.3 <- 2*pt(-abs(t1.3), df=15)
summary(test)
lm.snake <- lm(snake$Y~snake$X)
lm.snake0 <- lm(snake$Y~0+snake$X)
summary(lm.snake0)
summary(lm.snake)
sqrt(sigma2)
summary(lm.snake0)
lm.snake0$coefficients
lm.snake0$coefficients[1]
lm.snake0$fitted.values
lm.snake0$terms
summary(lm.snake0)
qt(1,1)
qt(.975,2)
qt(.975,1000)
qt(.975,15)
plot(lm.snake0)
plot(lm.snake0)[1]
plot(lm.snake0,which=1)
plot(lm.snake0,which=1)
library(ggplot2)
library(dplyr)
library(alr4)
df.data <- read.csv('hw2listings.csv',header = TRUE)
mean(df.data$review_scores_rating)
df.data$review_scores_rating
mean(df.data$review_scores_rating, na.rm = TRUE)
n <- 40
set.seed(343)
x1<-rnorm(n)
x2<-2-3*x1
y<-rnorm(n,mean=4+x1+x2,sd=1)
lm.1<-lm(y~x1+x2)
summary(lm.1)
lm.1.2 <- lm(y~x2+x1)
summary(lm.1.2)
n <- 40
set.seed(343)
x1<-rnorm(n)
x2<-2-3*x1
y<-rnorm(n,mean=4+x1+x2,sd=1)
lm.1<-lm(y~x1+x2)
summary(lm.1)
lm.1.2 <- lm(y~x2+x1)
summary(lm.1.2)
n <- 40
set.seed(101)
x1<-rnorm(n)
x2<-2-3*x1
x2.err<-x2 + runif(n, min=-0.01, max=0.01)
y4<-rnorm(n,mean=4+x1+x2.err, sd=1)
lm.4<-lm(y4~x1+x2.err)
summary(lm.4)
n <- 40
set.seed(101)
x1<-rnorm(n)
x2<-2-3*x1
x2.err<-x2 + runif(n, min=-0.01, max=0.01)
y4<-rnorm(n,mean=4+x1+x2.err, sd=1)
lm.4<-lm(y4~x1+x2.err)
summary(lm.4)
dm.lm4 <- model.matrix((lm.4))
lm.lm4.values <- eigen(t(dm.lm4)%*%lm.lm4)$values
dm.lm4.values <- eigen(t(dm.lm4)%*%lm.lm4)$values
dm.lm4.values <- eigen(t(dm.lm4)%*%dm.lm4)$values
dm.lm4.values
library(alr4)
df.p1 <- BGSgirls
lm1.2 <- lm(Soma~LG9+WT9,data=df.p1)
lm1.3 <- lm(Soma~LG9,data=df.p1)
pairs(~Soma+LG9+WT9,data=df.p1, main="Multiple Scatterplot Matrix")
library(alr4)
df.p1 <- BGSgirls
lm1.2 <- lm(Soma~LG9+WT9,data=df.p1)
lm1.3 <- lm(Soma~LG9,data=df.p1)
pairs(~Soma+LG9+WT9,data=df.p1, main="Multiple Scatterplot Matrix")
avPlots(lm1.2, ~WT9)
library(alr4)
df.p1 <- BGSgirls
lm1.2 <- lm(Soma~LG9+WT9,data=df.p1)
lm1.3 <- lm(Soma~WT9+LG9,data=df.p1)
aov1.4 <- anova(lm1.2)
aov1.5 <- anova(lm1.2)
summary(aov1.4)
aov1.4
aov1.5
aov1.5 <- anova(lm1.3)
aov1.5
aov1.5
avPlots(lm1.2, ~WT9)
aov1.4
set.seed(102)
x1 <- runif(60,min=-1,max=6)
x2 <- rbinom(60,size=3,prob=0.7)
set.seed(102)
x1 <- runif(60,min=-1,max=6)
x2 <- rbinom(60,size=3,prob=0.7)
error <- rnorm(60, mean = 0, sd = 1)
y <- 3-1.7*x1+error
plot(x1,y)
avPlots(lm1.2, ~WT9, main="Added")
avPlots(lm1.2, ~WT9, main="Added variable plot of Age 9 weight")
avPlots(lm1.2, ~WT9, main="Added variable plot of Age 9 weight")
avPlots(lm1.2, ~WT9, main="Added variable plot of Age 9 weight")
avPlots(lm1.2, ~WT9, main="Added variable plot of Age 9 weight")
plot(x1,y, main="Scatter plot of y versus x1")
avPlots(lm(y~x1+x2), ~x1, main="Added variable plot of Age 9 weight")
plot(x1,y, main="Scatter plot of y versus x1")
avPlots(lm(y~x1+x2), ~x1, main="Added variable plot of Age 9 weight")
plot(x1,y, main="Scatter plot of y versus x1")
avPlots(lm(y~x1+x2), ~x1, main="Added variable plot of Age 9 weight")
set.seed(102)
x1 <- runif(60,min=-1,max=6)
x2 <- rbinom(60,size=3,prob=0.7)
error <- rnorm(60, mean = 0, sd = 1)
y <- 3-1.7*x1+error
lm1 <- lm(y~x1+x2)
aov1 <- anova(lm1)
set.seed(102)
x1 <- runif(60,min=-1,max=6)
x2 <- rbinom(60,size=3,prob=0.7)
error <- rnorm(60, mean = 0, sd = 1)
y <- 3-1.7*x1+error
lm1 <- lm(y~x1+x2)
aov2.2 <- anova(lm1)
aov2.2
library(data.table)
library(dplyr)
equalWidth <- function(n, df) {
for (i in 1:n) {
quantile(df, c(seq(0, 1, by=1/n)))[i+1]
df[(df>=quantile(df, c(seq(0, 1, by=1/n)))[i]) & (df<=quantile(df, c(seq(0, 1, by=1/n)))[i+1])] <- i
}
return(df)
}
df.sa <- fread('data\\new\\SA.csv', header = T, sep=',',na.strings=c(""))
df.carrier <- fread('data\\new\\CARRIER.csv', header = T, sep=',',na.strings=c(""))
df.cargo <- fread('data\\new\\CARGO.csv', header = T, sep=',',na.strings=c(""))
df.driver <- fread('data\\new\\DRIVER.csv', header = T, sep=',',na.strings=c(""))
library(data.table)
library(bnlearn)
setwd('D:\\Program File\\Git\\git_projects\\STATS 504\\ProjectProposal\\stat-504-airbnb\\data')
lm2.3 <- lm(Distance~I(Speed^2),data=df.2,weights=(1/Speed))
library(alr4)
library(ggplot2)
library(knitr)
library(MASS)
library(boot)
df.1 <- salarygov
p <- ggplot(df.1, aes(x=NE, y=MaxSalary))
p + geom_point() + ggtitle("Max Salary depending on number of employees employed in each job class") + xlab("Number of Employees employed in job class") + ylab("Max Salary ($)")
df.2 <- stopping
p <- ggplot(df.2, aes(x=Speed, y=Distance))
p + geom_point() + ggtitle("Stopping distance depending on speed") + xlab("Speed (mph)") + ylab("Stopping Distance (feet)") + geom_smooth(method="lm", se=FALSE, color="red") +
geom_smooth(method = "lm", se = FALSE, formula= y ~ splines::bs(x,3))
lm2.2 <- lm(Distance~I(Speed^2),data=df.2)
plot(lm2.2,1)
lm2.3 <- lm(Distance~I(Speed^2),data=df.2,weights=(1/Speed))
summary(lm2.3)
library(alr4)
library(faraway)
library(MASS)
clear()
data = readRDS("Quiz2Data.RDS")
pairs(data, pch=16, col=rgb(0,0,0,0.5))
install.packages("shinydashboard")
install.packages("plotly")
install.packages("timevis")
shiny::runApp('D:/Games/Downloads')
shiny::runApp('D:/Program File/Git/git_projects/RA/DataVis')
(shiny.port = 7775)
options(shiny.host = "192.168.1.36")
options(shiny.port = 7775)
runApp(app)
shiny::runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
options(shiny.host = "216.243.41.19")
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
options(shiny.port = 7775)
shiny::runApp('D:/Program File/Git/git_projects/RA/DataVis')
options(shiny.host = "192.168.1.36")
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
shiny::runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
shiny::runApp('D:/Program File/Git/git_projects/RA/VizProto/DMDII-prototype')
library(shiny)
runApp('D:/Program File/Git/git_projects/RA/VizProto/DMDII-prototype')
install.packages(c("bindrcpp", "DBI", "dplyr", "forecast", "glue", "mapproj", "maps", "R6", "rmarkdown", "shinydashboard", "XML"))
remove.packages("makeR")
library(dplyr)
library(arules)
library(arulesViz)
library(ggplot2)
setwd("D:\\Program File\\Git\\git_projects\\interview\\zappos\\data")
df.events <- read.csv("events.csv", colClasses = c("numeric", "factor", "factor", "factor", "factor"))
#Unix to r date
df.events$timestamp <- as.POSIXct(df.events$timestamp/1000, origin="1970-01-01")
#Remove all users with only 1 session
df.summary <- df.events %>% group_by(visitorid) %>% summarise(count=n()) %>% filter(count > 1)
df.events <- df.events %>% filter(visitorid %in% unique(df.summary$visitorid)) %>% arrange(visitorid, timestamp)
#Identify unique sessions for each user and creating unique session id
#Session = 120 min between last event
df.events$tdiff <- unlist(tapply(df.events$timestamp, INDEX = df.events$visitorid, FUN = function(x) c(0, `units<-`(diff(x), "mins"))))
n <- 1
myFunction <- function(x) {
if (x == 0) {
n <<-1
}
if (x > 120) {
n <<- n+1
}
return(n)
}
df.events$sessionid <- mapply(df.events$tdiff, FUN=myFunction)
#Unique id combined visitorid and sessionid
df.events$vistorSessiondID <- df.events %>% group_indices(visitorid, sessionid)
write.csv(df.events[,c(8,4)], file="transactions", row.names = FALSE)
tr <- read.transactions("transactions", format = "single", cols = c(1,2), sep = ",")
rules <- apriori(tr, parameter = list(support=0.001, confidence=0.5))
summary(rules)
rules <- apriori(transaction.events)
transaction.events <- read.transactions("transactions", format = "single", cols = c(1,2), sep = ",")
transaction.events <- read.transactions("transactions", format = "single", cols = c(1,2), sep = ",")
rules <- apriori(transaction.events)
inspect(tr)
df.summary <- df.events %>% group_by(itemid) %>% summarise(count=n())
View(df.summary)
df.events <- df.events %>% filter(itemid %in% unique(df.summary$itemid[df.summary$count >= 5]))
df.events$vistorSessiondID <- df.events %>% group_indices(visitorid, sessionid)
write.csv(df.events[,c(8,4)], file="transactions", row.names = FALSE)
transaction.events <- read.transactions("transactions", format = "single", cols = c(1,2), sep = ",")
rules <- apriori(transaction.events)
data("groceries")
data("Groceries")
inspect(Groceries)
rules <- apriori(Groceries)
apriori(Groceries, parameter=list(support=0.001, confidence=0.5))
library(dplyr)
library(arules)
library(arulesViz)
library(ggplot2)
setwd("D:\\Program File\\Git\\git_projects\\interview\\zappos\\data")
df.events <- read.csv("events.csv", colClasses = c("numeric", "factor", "factor", "factor", "factor"))
#Unix to r date
df.events$timestamp <- as.POSIXct(df.events$timestamp/1000, origin="1970-01-01")
#Remove all users with only 1 session
df.summary <- df.events %>% group_by(visitorid) %>% summarise(count=n()) %>% filter(count > 1)
df.events <- df.events %>% filter(visitorid %in% unique(df.summary$visitorid)) %>% arrange(visitorid, timestamp)
#Identify unique sessions for each user and creating unique session id
#Session = 120 min between last event
df.events$tdiff <- unlist(tapply(df.events$timestamp, INDEX = df.events$visitorid, FUN = function(x) c(0, `units<-`(diff(x), "mins"))))
n <- 1
myFunction <- function(x) {
if (x == 0) {
n <<-1
}
if (x > 120) {
n <<- n+1
}
return(n)
}
df.events$sessionid <- mapply(df.events$tdiff, FUN=myFunction)
df.summary <- df.events %>% group_by(itemid) %>% summarise(count=n())
df.events <- df.events %>% filter(itemid %in% unique(df.summary$itemid[df.summary$count >= 5]))
#Unique id combined visitorid and sessionid
df.events$vistorSessiondID <- df.events %>% group_indices(visitorid, sessionid)
write.csv(df.events[,c(8,4)], file="transactions", row.names = FALSE)
transaction.events <- read.transactions("transactions", format = "single", cols = c(1,2), sep = ",")
rules <- apriori(transaction.events,  parameter=list(support=0.001, confidence=0.1))
rules <- apriori(transaction.events,  parameter=list(support=0.1, confidence=0.01))
rules <- apriori(transaction.events,  parameter=list(support=0.000001, confidence=0.01))
rules <- apriori(transaction.events,  parameter=list(support=0.0001, confidence=0.01))
rules
summary(rules)
library(rpart)
library(MASS)
df.car <- read.csv("cu.summary.csv")
df.males <- read.csv("Males.csv")
#getting rid of column identifier
df.males <- df.males[,-1]
df.car <- df.car[,-1]
lm.males <- lm(wage~., data=df.males)
summary(lm.males)
lm.males <- stepAIC(lm.males, direction="both")
summary(lm.males)
plot(lm.males)
plot(lm.males)[1]
plot(lm.males, which=c(1))
plot(lm.males, which=c(1))
plot(lm.males, which=c(1))
plot(lm.males, which=c(2))
install.packages("rpart.plot")
library(rpart.plot)
prp(tr.car, nn.cex=1)
tr.car <- rpart(Price~., data=df.car)
prp(tr.car, nn.cex=1)
tr.males <- rpart(wage~.,data=df.males)
prp(tr.males, nn.cex=1)
summary(lm.males)
library(rpart)
library(rpart.plot)
setwd("D:\\Program File\\Git\\git_projects\\INDE 498\\INDE498_HW2")
df.ch3ex2.med <- read.csv("MedGPA.csv")
df.ch3ex2.med[,-c(2)]
df.ch3ex2.med[,-c(1,3)]
ch3ex2.med.log <- glm( Accept~.,family=binomial(link='logit'),data=df.ch3ex2.med[,-c(1,3)])
summary(ch3ex2.med.log)
drop1(glm.full, test = "LRT")
drop1(ch3ex2.med.log, test = "LRT")
drop1(update(ch3ex2.med.log, ~ . -Apps), test = "LRT")
drop1(update(ch3ex2.med.log, ~ . -Apps -BCPM), test = "LRT")
summary(update(ch3ex2.med.log, ~ . -Apps -BCPM))
ch3ex2.med.log <- glm( Accept~.,family=binomial(link='logit'),data=df.ch3ex2.med[,-c(1,3)])
summary(ch3ex2.med.log)
ch3ex2.med.log <- step(ch3ex2.med.log, direction = "backward", trace = 1)
df.ch3ex2.med <- read.csv("MedGPA.csv")
ch3ex2.med.log <- glm( Accept~.,family=binomial(link='logit'),data=df.ch3ex2.med[,-c(1,3)])
ch3ex2.med.log <- step(ch3ex2.med.log, direction = "backward", trace = 1)
summary(ch3ex2.med.log)
ch3ex2.med.tree <- rpart(Accept~., data=df.ch3ex2.med[,-c(1,3)])
prp(ch3ex2.med.tree, varlen=3)
ch3ex2.med.tree <- rpart(Accept~., data=df.ch3ex2.med[,-c(1,3)], control = rpart.control(p = 0.001))
ch3ex2.med.tree <- rpart(Accept~., data=df.ch3ex2.med[,-c(1,3)], control = rpart.control(p = 0.001))
prp(ch3ex2.med.tree, varlen=3)
ch3ex2.med.tree <- rpart(Accept~., data=df.ch3ex2.med[,-c(1,3)], control = rpart.control(p = 0.00001))
prp(ch3ex2.med.tree, varlen=3)
ch3ex2.med.tree <- rpart(Accept~., data=df.ch3ex2.med[,-c(1,3)], control = rpart.control(p = -1))
prp(ch3ex2.med.tree, varlen=3)
df.ch3ex2.bh <- read.csv("badhealth.csv")
View(df.ch3ex2.med)
ch3ex2.med.bh <- glm( badh~.,family=binomial(link='logit'),data=df.ch3ex2.bh[,-c(1)])
ch3ex2.med.bh <- step(ch3ex2.med.bh, direction = "backward", trace = 1)
summary(ch3ex2.med.log)
summary(ch3ex2.med.bh)
ch3ex2.bh.tree <- rpart(badh~., data=df.ch3ex2.bh[,-c(1)], control = rpart.control(p = 0.0001))
prp(ch3ex2.bh.tree, varlen=3)
printcp(df.ch3ex2.bh)
printcp(df.ch3ex2.bh.tree)
ch3ex2.bh.tree <- rpart(badh~., data=df.ch3ex2.bh[,-c(1)], control = rpart.control(p = 0.0001))
printcp(ch3ex2.bh.tree)
ch3ex2.bh.tree <- rpart(badh~., data=df.ch3ex2.bh[,-c(1)], control = rpart.control(p = 0.0001))
prp(ch3ex2.bh.tree, varlen=3)
