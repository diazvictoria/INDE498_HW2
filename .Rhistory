library(ggplot2)
library(knitr)
library(MASS)
library(boot)
df.1 <- salarygov
p <- ggplot(df.1, aes(x=NE, y=MaxSalary))
p + geom_point() + ggtitle("Max Salary depending on number of employees employed in each job class") + xlab("Number of Employees employed in job class") + ylab("Max Salary ($)")
df.2 <- stopping
p <- ggplot(df.2, aes(x=Speed, y=Distance))
p + geom_point() + ggtitle("Stopping distance depending on speed") + xlab("Speed (mph)") + ylab("Stopping Distance (feet)") + geom_smooth(method="lm", se=FALSE, color="red") +
geom_smooth(method = "lm", se = FALSE, formula= y ~ splines::bs(x,3))
lm2.2 <- lm(Distance~I(Speed^2),data=df.2)
plot(lm2.2,1)
lm2.3 <- lm(Distance~I(Speed^2),data=df.2,weights=(1/Speed))
summary(lm2.3)
library(alr4)
library(faraway)
library(MASS)
clear()
data = readRDS("Quiz2Data.RDS")
pairs(data, pch=16, col=rgb(0,0,0,0.5))
install.packages("shinydashboard")
install.packages("plotly")
install.packages("timevis")
shiny::runApp('D:/Games/Downloads')
shiny::runApp('D:/Program File/Git/git_projects/RA/DataVis')
(shiny.port = 7775)
options(shiny.host = "192.168.1.36")
options(shiny.port = 7775)
runApp(app)
shiny::runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
options(shiny.host = "216.243.41.19")
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
options(shiny.port = 7775)
shiny::runApp('D:/Program File/Git/git_projects/RA/DataVis')
options(shiny.host = "192.168.1.36")
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
shiny::runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
shiny::runApp('D:/Program File/Git/git_projects/RA/VizProto/DMDII-prototype')
library(shiny)
runApp('D:/Program File/Git/git_projects/RA/VizProto/DMDII-prototype')
install.packages(c("bindrcpp", "DBI", "dplyr", "forecast", "glue", "mapproj", "maps", "R6", "rmarkdown", "shinydashboard", "XML"))
remove.packages("makeR")
library(dplyr)
library(arules)
library(arulesViz)
library(ggplot2)
setwd("D:\\Program File\\Git\\git_projects\\interview\\zappos\\data")
df.events <- read.csv("events.csv", colClasses = c("numeric", "factor", "factor", "factor", "factor"))
#Unix to r date
df.events$timestamp <- as.POSIXct(df.events$timestamp/1000, origin="1970-01-01")
#Remove all users with only 1 session
df.summary <- df.events %>% group_by(visitorid) %>% summarise(count=n()) %>% filter(count > 1)
df.events <- df.events %>% filter(visitorid %in% unique(df.summary$visitorid)) %>% arrange(visitorid, timestamp)
#Identify unique sessions for each user and creating unique session id
#Session = 120 min between last event
df.events$tdiff <- unlist(tapply(df.events$timestamp, INDEX = df.events$visitorid, FUN = function(x) c(0, `units<-`(diff(x), "mins"))))
n <- 1
myFunction <- function(x) {
if (x == 0) {
n <<-1
}
if (x > 120) {
n <<- n+1
}
return(n)
}
df.events$sessionid <- mapply(df.events$tdiff, FUN=myFunction)
#Unique id combined visitorid and sessionid
df.events$vistorSessiondID <- df.events %>% group_indices(visitorid, sessionid)
write.csv(df.events[,c(8,4)], file="transactions", row.names = FALSE)
tr <- read.transactions("transactions", format = "single", cols = c(1,2), sep = ",")
rules <- apriori(tr, parameter = list(support=0.001, confidence=0.5))
summary(rules)
rules <- apriori(transaction.events)
transaction.events <- read.transactions("transactions", format = "single", cols = c(1,2), sep = ",")
transaction.events <- read.transactions("transactions", format = "single", cols = c(1,2), sep = ",")
rules <- apriori(transaction.events)
inspect(tr)
df.summary <- df.events %>% group_by(itemid) %>% summarise(count=n())
View(df.summary)
df.events <- df.events %>% filter(itemid %in% unique(df.summary$itemid[df.summary$count >= 5]))
df.events$vistorSessiondID <- df.events %>% group_indices(visitorid, sessionid)
write.csv(df.events[,c(8,4)], file="transactions", row.names = FALSE)
transaction.events <- read.transactions("transactions", format = "single", cols = c(1,2), sep = ",")
rules <- apriori(transaction.events)
data("groceries")
data("Groceries")
inspect(Groceries)
rules <- apriori(Groceries)
apriori(Groceries, parameter=list(support=0.001, confidence=0.5))
library(dplyr)
library(arules)
library(arulesViz)
library(ggplot2)
setwd("D:\\Program File\\Git\\git_projects\\interview\\zappos\\data")
df.events <- read.csv("events.csv", colClasses = c("numeric", "factor", "factor", "factor", "factor"))
#Unix to r date
df.events$timestamp <- as.POSIXct(df.events$timestamp/1000, origin="1970-01-01")
#Remove all users with only 1 session
df.summary <- df.events %>% group_by(visitorid) %>% summarise(count=n()) %>% filter(count > 1)
df.events <- df.events %>% filter(visitorid %in% unique(df.summary$visitorid)) %>% arrange(visitorid, timestamp)
#Identify unique sessions for each user and creating unique session id
#Session = 120 min between last event
df.events$tdiff <- unlist(tapply(df.events$timestamp, INDEX = df.events$visitorid, FUN = function(x) c(0, `units<-`(diff(x), "mins"))))
n <- 1
myFunction <- function(x) {
if (x == 0) {
n <<-1
}
if (x > 120) {
n <<- n+1
}
return(n)
}
df.events$sessionid <- mapply(df.events$tdiff, FUN=myFunction)
df.summary <- df.events %>% group_by(itemid) %>% summarise(count=n())
df.events <- df.events %>% filter(itemid %in% unique(df.summary$itemid[df.summary$count >= 5]))
#Unique id combined visitorid and sessionid
df.events$vistorSessiondID <- df.events %>% group_indices(visitorid, sessionid)
write.csv(df.events[,c(8,4)], file="transactions", row.names = FALSE)
transaction.events <- read.transactions("transactions", format = "single", cols = c(1,2), sep = ",")
rules <- apriori(transaction.events,  parameter=list(support=0.001, confidence=0.1))
rules <- apriori(transaction.events,  parameter=list(support=0.1, confidence=0.01))
rules <- apriori(transaction.events,  parameter=list(support=0.000001, confidence=0.01))
rules <- apriori(transaction.events,  parameter=list(support=0.0001, confidence=0.01))
rules
summary(rules)
library(rpart)
library(MASS)
df.car <- read.csv("cu.summary.csv")
df.males <- read.csv("Males.csv")
#getting rid of column identifier
df.males <- df.males[,-1]
df.car <- df.car[,-1]
lm.males <- lm(wage~., data=df.males)
summary(lm.males)
lm.males <- stepAIC(lm.males, direction="both")
summary(lm.males)
plot(lm.males)
plot(lm.males)[1]
plot(lm.males, which=c(1))
plot(lm.males, which=c(1))
plot(lm.males, which=c(1))
plot(lm.males, which=c(2))
install.packages("rpart.plot")
library(rpart.plot)
prp(tr.car, nn.cex=1)
tr.car <- rpart(Price~., data=df.car)
prp(tr.car, nn.cex=1)
tr.males <- rpart(wage~.,data=df.males)
prp(tr.males, nn.cex=1)
summary(lm.males)
library(rpart)
library(rpart.plot)
setwd("D:\\Program File\\Git\\git_projects\\INDE 498\\INDE498_HW2")
df.ch3ex2.med <- read.csv("MedGPA.csv")
df.ch3ex2.med[,-c(2)]
df.ch3ex2.med[,-c(1,3)]
ch3ex2.med.log <- glm( Accept~.,family=binomial(link='logit'),data=df.ch3ex2.med[,-c(1,3)])
summary(ch3ex2.med.log)
drop1(glm.full, test = "LRT")
drop1(ch3ex2.med.log, test = "LRT")
drop1(update(ch3ex2.med.log, ~ . -Apps), test = "LRT")
drop1(update(ch3ex2.med.log, ~ . -Apps -BCPM), test = "LRT")
summary(update(ch3ex2.med.log, ~ . -Apps -BCPM))
ch3ex2.med.log <- glm( Accept~.,family=binomial(link='logit'),data=df.ch3ex2.med[,-c(1,3)])
summary(ch3ex2.med.log)
ch3ex2.med.log <- step(ch3ex2.med.log, direction = "backward", trace = 1)
df.ch3ex2.med <- read.csv("MedGPA.csv")
ch3ex2.med.log <- glm( Accept~.,family=binomial(link='logit'),data=df.ch3ex2.med[,-c(1,3)])
ch3ex2.med.log <- step(ch3ex2.med.log, direction = "backward", trace = 1)
summary(ch3ex2.med.log)
ch3ex2.med.tree <- rpart(Accept~., data=df.ch3ex2.med[,-c(1,3)])
prp(ch3ex2.med.tree, varlen=3)
ch3ex2.med.tree <- rpart(Accept~., data=df.ch3ex2.med[,-c(1,3)], control = rpart.control(p = 0.001))
ch3ex2.med.tree <- rpart(Accept~., data=df.ch3ex2.med[,-c(1,3)], control = rpart.control(p = 0.001))
prp(ch3ex2.med.tree, varlen=3)
ch3ex2.med.tree <- rpart(Accept~., data=df.ch3ex2.med[,-c(1,3)], control = rpart.control(p = 0.00001))
prp(ch3ex2.med.tree, varlen=3)
ch3ex2.med.tree <- rpart(Accept~., data=df.ch3ex2.med[,-c(1,3)], control = rpart.control(p = -1))
prp(ch3ex2.med.tree, varlen=3)
df.ch3ex2.bh <- read.csv("badhealth.csv")
View(df.ch3ex2.med)
ch3ex2.med.bh <- glm( badh~.,family=binomial(link='logit'),data=df.ch3ex2.bh[,-c(1)])
ch3ex2.med.bh <- step(ch3ex2.med.bh, direction = "backward", trace = 1)
summary(ch3ex2.med.log)
summary(ch3ex2.med.bh)
ch3ex2.bh.tree <- rpart(badh~., data=df.ch3ex2.bh[,-c(1)], control = rpart.control(p = 0.0001))
prp(ch3ex2.bh.tree, varlen=3)
printcp(df.ch3ex2.bh)
printcp(df.ch3ex2.bh.tree)
ch3ex2.bh.tree <- rpart(badh~., data=df.ch3ex2.bh[,-c(1)], control = rpart.control(p = 0.0001))
printcp(ch3ex2.bh.tree)
ch3ex2.bh.tree <- rpart(badh~., data=df.ch3ex2.bh[,-c(1)], control = rpart.control(p = 0.0001))
prp(ch3ex2.bh.tree, varlen=3)
knitr::opts_chunk$set(echo = TRUE)
library(rpart)
library(rpart.plot)
library(RCurl)
library(RCurl)
AD <- read.csv(text=getURL("https://raw.githubusercontent.com/shuailab/ind_498/master/resource/data/AD.csv"))
AD$ID = c(1:dim(AD)[1])
AD$AGE_bin = ifelse(AD$AGE >= mean(AD$AGE), as.factor(1), as.factor(0))
logit.AD.1 <- glm(AGE_bin ~ ., data = AD[, -c(15)], family = "binomial")
summary(logit.AD.1)
logit.AD.2 <- glm(AGE_bin ~ HippoNV + e4_1 + PTEDUCAT , data = AD[, -c(15)], family = "binomial")
logit.AD.2 <- glm(AGE_bin ~ HippoNV + e4_1 + PTEDUCAT , data = AD[, -c(15)], family = "binomial", maxit = 100)
summary(logit.AD.2)
AD <- read.csv(text=getURL("https://raw.githubusercontent.com/shuailab/ind_498/master/resource/data/AD.csv"))
AD$ID = c(1:dim(AD)[1])
AD$AGE_bin = ifelse(AD$AGE >= mean(AD$AGE), 1, 0)
AD = AD[ , !(names(AD) %in% c("AGE", "MMSCORE", "TOTAL13", "DX_bl"))]
```{r}
logit.AD.1 <- glm(AGE_bin ~ ., data = AD[, -c(15)], family = "binomial")
summary(logit.AD.1)
AD$AGE_bin = ifelse(AD$AGE >= mean(AD$AGE), as.factor(1), as.factor(0))
AD <- read.csv(text=getURL("https://raw.githubusercontent.com/shuailab/ind_498/master/resource/data/AD.csv"))
AD$ID = c(1:dim(AD)[1])
AD$AGE_bin = ifelse(AD$AGE >= mean(AD$AGE), as.factor(1), as.factor(0))
AD = AD[ , !(names(AD) %in% c("AGE", "MMSCORE", "TOTAL13", "DX_bl"))]
logit.AD.1 <- glm(AGE_bin ~ ., data = AD[, -c(15)], family = "binomial")
summary(logit.AD.1)
logit.AD.1 <- glm(AGE_bin ~ ., data = AD[, -c(15)], family = "binomial")
summary(logit.AD.1)
library(RCurl)
AD <- read.csv(text=getURL("https://raw.githubusercontent.com/shuailab/ind_498/master/resource/data/AD.csv"))
AD$ID = c(1:dim(AD)[1])
AD$AGE_bin = ifelse(AD$AGE >= mean(AD$AGE), 1, 0)
AD = AD[ , !(names(AD) %in% c("AGE", "MMSCORE", "TOTAL13", "DX_bl"))]
```{r}
logit.AD.1 <- glm(AGE_bin ~ ., data = AD[, -c(15)], family = "binomial")
summary(logit.AD.1)
logit.AD.2 <- glm(AGE_bin ~ HippoNV + e4_1 + PTEDUCAT , data = AD[, -c(15)], family = "binomial", maxit = 100)
summary(logit.AD.2)
logit.AD.2 <- glm(AGE_bin ~ HippoNV + e4_1 + PTEDUCAT , data = AD[, -c(15)], family = "binomial")
summary(logit.AD.2)
require(reshape2)
require(ggplot2)
require(ggplot2)
p <- ggplot(AD.long, aes(x = factor(AGE_bin), y = value))
p <- p + geom_boxplot(size = 0.75, alpha = 0.5)
AD.long <- melt(AD[,c(2:5, 15, 16)], id.vars = c("ID", "AGE_bin"))
require(ggplot2)
p <- ggplot(AD.long, aes(x = factor(AGE_bin), y = value))
p <- p + geom_boxplot(size = 0.75, alpha = 0.5)
p <- p + geom_point(position = position_jitter(w = 0.05, h = 0), alpha = 0.1)
p <- p + stat_summary(fun.y = mean, geom = "point", shape = 18, size = 6,
alpha = 0.75, colour = "red")
p <- p + stat_summary(fun.data = "mean_cl_normal", geom = "errorbar",
width = .2, alpha = 0.8)
p <- p + facet_wrap( ~ variable, scales = "free_y", ncol = 3)
p <- p + labs(title = "Boxplots of variables by mean(age) (0: < mean;1: >= mean)")
print(p)
logit.AD.full <- glm(AGE_bin ~ ., data = AD[!(names(AD) %in% c("ID"))], family = "binomial")
logit.AD.final <- step(logit.AD.full, direction="both", trace = 0)
summary(logit.AD.final)
confint(logit.AD.final)
library(aod)
wald.test(b = coef(logit.AD.final), Sigma = vcov(logit.AD.final), Terms = 2)
AD.tree <- rpart(AGE_bin ~., data = AD[!(names(AD) %in% c("ID"))], control = rpart.control(p = 0.0001))
prp(AD.tree, varlen=3)
AD.tree <- rpart(AGE_bin ~., data = AD[!(names(AD) %in% c("ID"))])
prp(AD.tree, varlen=3)
AD$AGE_bin <- as.factor(AD$AGE_bin)
typeof(AD$AGE_bin)
AD$AGE_bin <- as.factor(AD$AGE_bin)
AD$AGE_bin = ifelse(AD$AGE == 1, as.factor(1), as.factor(0))
typeof(AD$AGE_bin)
AD <- read.csv(text=getURL("https://raw.githubusercontent.com/shuailab/ind_498/master/resource/data/AD.csv"))
AD$ID = c(1:dim(AD)[1])
AD$AGE_bin = ifelse(AD$AGE >= mean(AD$AGE), 1, 0)
AD = AD[ , !(names(AD) %in% c("AGE", "MMSCORE", "TOTAL13", "DX_bl"))]
typeof(AD$AGE_bin)
head(AD$AGE_bin)
AD$AGE_bin <- as.factor(AD$AGE_bin)
head(AD$AGE_bin)
AD.tree <- rpart(AGE_bin ~., data = AD[!(names(AD) %in% c("ID"))])
prp(AD.tree, varlen=3)
AD$AGE_bin <- as.factor(AD$AGE_bin)
AD.tree <- rpart(AGE_bin ~., data = AD[!(names(AD) %in% c("ID"))])
prp(AD.tree, varlen=5)
prp(AD.tree, varlen=10)
print(tree$variable.importance)
print(AD.tree$variable.importance)
tree_0.05 <- prune(AD.tree,cp=0.05)
prp(tree_0.05,nn.cex=1)
set.seed(1)
train.ix <- sample(nrow(AD),floor( nrow(AD)/2) )
err.train.v <- NULL
err.test.v <- NULL
leaf.v <- NULL
for(i in seq(0.2,0,by=-0.005) ){
tree <- rpart( AD ~ ., data = AD[train.ix,], cp=i  )
pred.train <- predict(tree, AD[train.ix,],type="class")
pred.test <- predict(tree, AD[-train.ix,],type="class")
current.err.train <- length(which(pred.train != AD[train.ix,]$AGE_bin))/length(pred.train)
current.err.test <- length(which(pred.test != AD[-train.ix,]$AGE_bin))/length(pred.test)
err.train.v <- c(err.train.v, current.err.train)
err.test.v <- c(err.test.v, current.err.test)
leaf.v <- c(leaf.v, length(which(tree$frame$var == "<leaf>")))
}
set.seed(1)
train.ix <- sample(nrow(AD),floor( nrow(AD)/2) )
err.train.v <- NULL
err.test.v <- NULL
leaf.v <- NULL
for(i in seq(0.2,0,by=-0.005) ){
tree <- rpart( AD ~ ., data = AD[train.ix,], cp=i  )
pred.train <- predict(tree, AD[train.ix,],type="class")
pred.test <- predict(tree, AD[-train.ix,],type="class")
current.err.train <- length(which(pred.train != AD[train.ix,]$AGE_bin))/length(pred.train)
current.err.test <- length(which(pred.test != AD[-train.ix,]$AGE_bin))/length(pred.test)
err.train.v <- c(err.train.v, current.err.train)
err.test.v <- c(err.test.v, current.err.test)
leaf.v <- c(leaf.v, length(which(tree$frame$var == "<leaf>")))
}
for(i in seq(0.2,0,by=-0.005) ){
tree <- rpart( AGE_bin ~ ., data = AD[train.ix,], cp=i  )
pred.train <- predict(tree, AD[train.ix,],type="class")
pred.test <- predict(tree, AD[-train.ix,],type="class")
current.err.train <- length(which(pred.train != AD[train.ix,]$AGE_bin))/length(pred.train)
current.err.test <- length(which(pred.test != AD[-train.ix,]$AGE_bin))/length(pred.test)
err.train.v <- c(err.train.v, current.err.train)
err.test.v <- c(err.test.v, current.err.test)
leaf.v <- c(leaf.v, length(which(tree$frame$var == "<leaf>")))
}
err.mat <- as.data.frame( cbind( train_err = err.train.v, test_err = err.test.v , leaf_num = leaf.v ) )
err.mat$leaf_num <- as.factor( err.mat$leaf_num  )
err.mat <- unique(err.mat)
err.mat <- err.mat %>% gather(type, error, train_err,test_err)
library(rpart)
for(i in seq(0.2,0,by=-0.005) ){
tree <- rpart( AGE_bin ~ ., data = AD[train.ix,], cp=i  )
pred.train <- predict(tree, AD[train.ix,],type="class")
pred.test <- predict(tree, AD[-train.ix,],type="class")
current.err.train <- length(which(pred.train != AD[train.ix,]$AGE_bin))/length(pred.train)
current.err.test <- length(which(pred.test != AD[-train.ix,]$AGE_bin))/length(pred.test)
err.train.v <- c(err.train.v, current.err.train)
err.test.v <- c(err.test.v, current.err.test)
leaf.v <- c(leaf.v, length(which(tree$frame$var == "<leaf>")))
}
err.mat <- as.data.frame( cbind( train_err = err.train.v, test_err = err.test.v , leaf_num = leaf.v ) )
err.mat$leaf_num <- as.factor( err.mat$leaf_num  )
err.mat <- unique(err.mat)
err.mat <- err.mat %>% gather(type, error, train_err,test_err)
library(magrittr)
err.mat <- err.mat %>% gather(type, error, train_err,test_err)
library(tidyr)
err.mat <- err.mat %>% gather(type, error, train_err,test_err)
data.plot <- err.mat %>% mutate(type = factor(type))
library(ggplot2)
data.plot <- err.mat %>% mutate(type = factor(type))
library(ggplot2)
library(rpart)
library(rpart.plot)
library(dplyr)
library(tidyr)
library(ggplot2)
library(partykit)
data.plot <- err.mat %>% mutate(type = factor(type))
ggplot(data.plot, aes(x=leaf_num, y=error, shape = type, color=type)) + geom_line() +
geom_point(size=3)
tree_0.05 <- prune(tree,cp=0.05)
tree_0.05 <- prune(tree,cp=0.05)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp=0.04)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp=0.1)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp=0.00004)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp=0.004)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp=0.04)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp=0.001)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp=0.88)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp=0.08)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp=0.009)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp=0.007)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp=0.001)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp=0.091)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp=0.00199)
prp(tree_0.05,nn.cex=1)
?prune
?rpart
tree_0.05 <- prune(tree,cp=0.002)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp=0.09)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp=0.001)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp=0.00199)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp=0.0099)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp=0.0919)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,maxdepth)
tree_0.05 <- prune(tree,maxdepth = 3)
tree_0.05 <- prune(tree,cp =0.001, maxdepth = 3)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp =0.001, depth = 3)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp =0.0019, depth = 3)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp =0.00199999, depth = 3)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp =0.0199999, depth = 3)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp =0.0199, depth = 3)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp =0.1199, depth = 3)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp =0.0199, depth = 3)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp =0.0299, depth = 3)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp =0.0399, depth = 3)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp =0.039, depth = 3)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp =0.0299, depth = 3)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp =0.02999, depth = 3)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp =0.02999999, depth = 3)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp =0.029, depth = 3)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp =0.129, depth = 3)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp =0.029, depth = 3)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp =0.039, depth = 3)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp =0.029, depth = 3)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp =0.039, depth = 3)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp =0.03, depth = 3)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp =0.032, depth = 3)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp =0.031, depth = 3)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp =0.03299, depth = 3)
prp(tree_0.05,nn.cex=1)
tree_0.05 <- prune(tree,cp =0.0319, depth = 3)
prp(tree_0.05,nn.cex=1)
set.seed(1)
train.ix <- sample(nrow(AD),floor( nrow(AD)/2) )
err.train.v <- NULL
err.test.v <- NULL
leaf.v <- NULL
for(i in seq(0.2,0,by=-0.005) ){
tree <- rpart( AGE_bin ~ ., data = AD[train.ix,], cp=i  )
pred.train <- predict(tree, AD[train.ix,],type="class")
pred.test <- predict(tree, AD[-train.ix,],type="class")
current.err.train <- length(which(pred.train != AD[train.ix,]$AGE_bin))/length(pred.train)
current.err.test <- length(which(pred.test != AD[-train.ix,]$AGE_bin))/length(pred.test)
err.train.v <- c(err.train.v, current.err.train)
err.test.v <- c(err.test.v, current.err.test)
leaf.v <- c(leaf.v, length(which(tree$frame$var == "<leaf>")))
}
for(i in seq(0.2,0,by=-0.005) ){
tree <- rpart( AGE_bin ~ ., data = AD[train.ix,], cp=i  )
pred.train <- predict(tree, AD[train.ix,],type="class")
pred.test <- predict(tree, AD[-train.ix,],type="class")
current.err.train <- length(which(pred.train != AD[train.ix,]$AGE_bin))/length(pred.train)
current.err.test <- length(which(pred.test != AD[-train.ix,]$AGE_bin))/length(pred.test)
err.train.v <- c(err.train.v, current.err.train)
err.test.v <- c(err.test.v, current.err.test)
leaf.v <- c(leaf.v, length(which(tree$frame$var == "<leaf>")))
}
err.mat <- as.data.frame( cbind( train_err = err.train.v, test_err = err.test.v , leaf_num = leaf.v ) )
err.mat$leaf_num <- as.factor( err.mat$leaf_num  )
err.mat$leaf_num <- as.factor( err.mat$leaf_num  )
err.mat <- unique(err.mat)
err.mat <- err.mat %>% gather(type, error, train_err,test_err)
data.plot <- err.mat %>% mutate(type = factor(type))
ggplot(data.plot, aes(x=leaf_num, y=error, shape = type, color=type), group = 1) + geom_line() +
geom_point(size=3)
ggplot(data.plot, aes(x=leaf_num, y=error, shape = type, color=type, group = 1)) + geom_line() +
geom_point(size=3)
ggplot(data.plot, aes(x=leaf_num, y=error, shape = type, color=type)) + geom_line() +
geom_point(size=3)
ggplot(data.plot, aes(x=leaf_num, y=error, shape = type, color=type, group = 2)) + geom_line() +
geom_point(size=3)
ggplot(data.plot, aes(x=leaf_num, y=error, shape = type, color=type)) + geom_line() +
geom_point(size=3)
